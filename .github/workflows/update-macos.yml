name: Update Macos

on:
    workflow_dispatch:

    push:
        branches:
            - "build/release"
            - "dev/clients"
        tags:
            - 'v*'

jobs:
    update_macos:
        runs-on: macos-13
        steps:
            - name: Check out the repo
              uses: actions/checkout@v3

            - name: Setup Node
              uses: actions/setup-node@v1
              with:
                  node-version: '16.18'

            - name: get latest tag
              uses: "WyriHaximus/github-action-get-previous-tag@v1"
              id: get-latest-tag
              with:
                fallback: latest

            - name: Show All Xcode version
              run: ls /Applications | grep Xcode
            
            - name: Setup Xcode
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: '14.2'

            - name: Cache
              uses: actions/cache@v1
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/packagge-lock.json')}}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: 3.9

            - name: Install
              run: |
                npm install
            - run: npm i -g @quasar/cli
            
            - name: Install the Apple certificate and provisioning profile
              env:
                BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_BUILD_DEVELOPER_ID_CERTIFICATE_BASE64 }}
                P12_PASSWORD: ${{ secrets.MACOS_P12_DEV_PASSWORD }}
                BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_BUILD_DEVELOPER_ID_PROVISION_PROFILE_BASE64 }}
                KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
              run: |
                # create variables
                CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
                PlanetaMacDev=$RUNNER_TEMP/PlanetaMacDev.provisionprofile
                KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

                # import certificate and provisioning profile from secrets
                echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
                echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PlanetaMacDev

                # create temporary keychain
                security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                # import certificate to keychain
                security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                security list-keychain -d user -s $KEYCHAIN_PATH

                # apply provisioning profile
                mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                cp $PlanetaMacDev ${{ github.workspace }}/packages/app/build/mac/
            
            - name: Create Macos Notarize Config File
              run: |
                cd packages/app/build/mac
                echo "const config = {" > notarize.js
                echo "  appleId: '${{ secrets.APPLE_DEVELOPER_APP_ID }}'," >> notarize.js
                echo "  appleIdPassword: '${{ secrets.APPLE_DEVELOPER_APP_ID_PASSWORD }}'," >> notarize.js
                echo "  teamId: '${{ secrets.APPLE_DEVELOPER_APP_ID_TEAM_ID }}'" >> notarize.js
                echo "};" >> notarize.js
                echo "module.exports = config;" >> notarize.js
                npx prettier --write notarize.js
                
            - name: Show mac build files
              run: ls -a packages/app/build/mac/
            
            - name: Build dmg
              run: cd packages/app/;node build/updateVersion;PLATFORM=DESKTOP quasar build -m electron -T mac

            - name: Show
              run: ls -a packages/app/dist/electron/Packaged/
            
            - name: Get package version
              id: get-version
              run: echo "::set-output name=version::$(node -e 'console.log(require("./packages/app/package.json").version)')"

            - name: Release dmg
              uses: djnicholson/release-action@v2.11
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  release-name: TermiPass-dmg Release
                  tag-name: ${{ steps.get-latest-tag.outputs.tag }}
                  asset-name: TermiPass.dmg
                  file: 'packages/app/dist/electron/Packaged/TermiPass-${{ steps.get-version.outputs.version }}.dmg'

            - name: Release Update zip
              uses: djnicholson/release-action@v2.11
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  release-name: darwin-update-arm.zip Release
                  tag-name: ${{ steps.get-latest-tag.outputs.tag }}
                  asset-name: TermiPass-darwin-x64-update.zip
                  file: 'packages/app/dist/electron/Packaged/TermiPass-${{ steps.get-version.outputs.version }}-mac.zip'
            
            