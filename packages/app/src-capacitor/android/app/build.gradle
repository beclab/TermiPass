import groovy.json.JsonSlurper

apply plugin: 'com.android.application'

static def gitVersionCode() {
    def cmd = 'git tag --list'
    cmd.execute().text.trim().split("\n").size()
}

static def gitVersionTag() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()

    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern

    if (matcher) {
        version = version.substring(0, matcher.start()) + "." + matcher[0][1]
    } else {
        version = version + ".0"
    }

    return version
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd_HH-mm", TimeZone.getTimeZone("GMT+8",))
}

def getPackageVersionCode() {
    def packageJsonFile = file('../../package.json')
    //logger.lifecycle(packageJsonFile.text)
    Map myJson =  new JsonSlurper().parseText(packageJsonFile.text)
    def result = Integer.parseInt(myJson.get('versionCode')) + rootProject.ext.resubmitVersion
    logger.lifecycle("packageCode: ${myJson.get('versionCode')} resubmitVersion : ${rootProject.ext.resubmitVersion}")
    logger.lifecycle("versionCode: ${result}")
    return result
}

def getPackageVersionName() {
    def packageJsonFile = file('../../../package.json')
    Map myJson =  new JsonSlurper().parseText(packageJsonFile.text)
    def result = myJson.get('version').toString()
    logger.lifecycle("versionName: ${result}")
    return result
}

android {
    namespace "com.terminus.planeta"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.terminus.planeta"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getPackageVersionCode()
        versionName getPackageVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "TermiPass_${versionCode}_v${versionName}_${buildTime()}")
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs{
        debug{
            file("keystore.properties").with {
                if (it.canRead()){
                    Properties keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(it))
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    v1SigningEnabled true       //对JAR签名
                    v2SigningEnabled true       //对APK签名
                }else {
                    println 'Unable to read keystore.properties'
                }
            }
        }
    }
    buildTypes {
        debug{
            applicationIdSuffix ".debug"
            minifyEnabled false
            resValue "string", "app_name", "TermiPass Debug"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            resValue "string", "app_name", "TermiPass"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
        viewBinding true
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.tencent:mmkv-static:1.2.10'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.core:core-ktx:1.6.0'

    implementation 'com.github.kevinsawicki:http-request:6.0'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    implementation 'com.madgag.spongycastle:core:1.54.0.0'
    implementation 'com.madgag.spongycastle:prov:1.54.0.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.greenrobot:eventbus:3.3.1'
    implementation 'com.google.guava:guava:27.0.1-android'


    implementation "androidx.browser:browser:1.2.0"
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
    implementation "androidx.work:work-runtime:2.7.0"
    implementation ':ipn@aar'
}

apply from: 'capacitor.build.gradle'
apply plugin: 'org.jetbrains.kotlin.android'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
